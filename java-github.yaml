name: CICD Pipeline

on:
  push:
    branches:
      - main

jobs:
  compile:
    runs-on: self-hosted
    steps:
      - name: Install git
        run: sudo apt install git -y
      - name: checkout code
        uses: actions/checkout@v4
      - name: maven Installation
        run: sudo apt install maven -y
      - name: Set up Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn compile
      
  security-check:
    runs-on: self-hosted
    needs: compile

    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: Trivy Installation
        run: |
          sudo apt-get install wget gnupg -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y 
          sudo apt-get install trivy -y 
      - name: Trivy FS Scan
        run: trivy fs --format table .

      - name: Gitleaks Installation
        run: sudo apt install gitleaks -y 
      - name: Gitleaks Scan
        run: gitleaks detect source . -r gitleaks-report.json -f json
      
  test:
    runs-on: self-hosted
    needs: security-check

    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Unit test cases
        run: mvn test

  build_project_and_sonar_scanner:
    runs-on: self-hosted
    needs: test

    steps:
      - name: Install unzip
        run: sudo apt install unzip -y
      - name: checkout code
        uses: actions/checkout@v4
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build project 
        run: mvn package
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

      - name: Checking out
        uses: actions/checkout@v4
        with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }} 
          #squ_98176c1a020b5cb62d4d8898dc81304761979c0f

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check 
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  build_docker_image_and_push:
    runs-on: self-hosted
    needs: build_project_and_sonar_scanner
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app.jar
          path: app
          
      - name: Login to Docker Hub 
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx 
        uses: docker/setup-buildx-action@v3 
      - name: Build and push 
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: sunilrsonar/bankapp:latest
          file: ./Dockerfile
  deploy_to_kebernetes:
    runs-on: self-hosted
    needs: build_docker_image_and_push

    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: Install AWS CLI 
        run: >
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment.yaml
